*************** int copy_thread(int nr, unsigned long cl
*** 390,399 ****
  	p->thread.fs = me->thread.fs;
  	p->thread.gs = me->thread.gs;
  
- 	asm("movl %%gs,%0" : "=m" (p->thread.gsindex));
- 	asm("movl %%fs,%0" : "=m" (p->thread.fsindex));
- 	asm("movl %%es,%0" : "=m" (p->thread.es));
- 	asm("movl %%ds,%0" : "=m" (p->thread.ds));
  
  	if (unlikely(me->thread.io_bitmap_ptr != NULL)) { 
  		p->thread.io_bitmap_ptr = kmalloc(IO_BITMAP_BYTES, GFP_KERNEL);
--- 390,399 ----
  	p->thread.fs = me->thread.fs;
  	p->thread.gs = me->thread.gs;
  
+ 	asm("mov %%gs,%0" : "=m" (p->thread.gsindex));
+ 	asm("mov %%fs,%0" : "=m" (p->thread.fsindex));
+ 	asm("mov %%es,%0" : "=m" (p->thread.es));
+ 	asm("mov %%ds,%0" : "=m" (p->thread.ds));
  
  	if (unlikely(me->thread.io_bitmap_ptr != NULL)) { 
  		p->thread.io_bitmap_ptr = kmalloc(IO_BITMAP_BYTES, GFP_KERNEL);
*************** struct task_struct *__switch_to(struct t
*** 456,466 ****
  	 * Switch DS and ES.
  	 * This won't pick up thread selector changes, but I guess that is ok.
  	 */
- 	asm volatile("movl %%es,%0" : "=m" (prev->es)); 
  	if (unlikely(next->es | prev->es))
  		loadsegment(es, next->es); 
  	
- 	asm volatile ("movl %%ds,%0" : "=m" (prev->ds)); 
  	if (unlikely(next->ds | prev->ds))
  		loadsegment(ds, next->ds);
  
--- 456,466 ----
  	 * Switch DS and ES.
  	 * This won't pick up thread selector changes, but I guess that is ok.
  	 */
+ 	asm volatile("mov %%es,%0" : "=m" (prev->es)); 
  	if (unlikely(next->es | prev->es))
  		loadsegment(es, next->es); 
  	
+ 	asm volatile ("mov %%ds,%0" : "=m" (prev->ds)); 
  	if (unlikely(next->ds | prev->ds))
  		loadsegment(ds, next->ds);
  
*************** struct task_struct *__switch_to(struct t
*** 471,477 ****
  	 */
  	{ 
  		unsigned fsindex;
- 		asm volatile("movl %%fs,%0" : "=g" (fsindex)); 
  		/* segment register != 0 always requires a reload. 
  		   also reload when it has changed. 
  		   when prev process used 64bit base always reload
--- 471,477 ----
  	 */
  	{ 
  		unsigned fsindex;
+ 		asm volatile("movl %%fs,%0" : "=r" (fsindex)); 
  		/* segment register != 0 always requires a reload. 
  		   also reload when it has changed. 
  		   when prev process used 64bit base always reload
*************** struct task_struct *__switch_to(struct t
*** 492,498 ****
  	}
  	{ 
  		unsigned gsindex;
- 		asm volatile("movl %%gs,%0" : "=g" (gsindex)); 
  		if (unlikely(gsindex | next->gsindex | prev->gs)) {
  			load_gs_index(next->gsindex);
  			if (gsindex)
--- 492,498 ----
  	}
  	{ 
  		unsigned gsindex;
+ 		asm volatile("movl %%gs,%0" : "=r" (gsindex)); 
  		if (unlikely(gsindex | next->gsindex | prev->gs)) {
  			load_gs_index(next->gsindex);
  			if (gsindex)
